plugins {
	id 'org.springframework.boot' version '2.4.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'

	id 'java'
	id 'jacoco'
}

group = 'com.tomasfriends'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// JPA, Mysql
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compile 'mysql:mysql-connector-java'

	//implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//testImplementation 'org.springframework.security:spring-security-test'
}

test {
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacoco.exec")
	}

	useJUnitPlatform()

	finalizedBy 'jacocoTestReport'
}

jacoco {
	// JaCoCo 버전
	toolVersion = '0.8.5'

	//  테스트결과 리포트를 저장할 경로 변경
	//  default는 "${project.reporting.baseDir}/jacoco"
	//  reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
	reports {
		// 원하는 리포트를 켜고 끌 수 있다.
		html.enabled true
		xml.enabled false
		csv.enabled false

//      각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있다.
//      html.destination file("$buildDir/jacocoHtml")
//      xml.destination file("$buildDir/jacoco.xml")
	}

	// test task 를 실행할 때 마다 자동으로 jacoco task 을 실행되게 한다.
	// 테스트만 하려 했는데 리포트도 실행될 수 있으니 개인 취향대로 넣고 빼자.
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			// 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 한다.
			limit {
				// 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
				// 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
				minimum = 0.30
			}
		}

		rule {
			// 룰을 간단히 켜고 끌 수 있다.
			enabled = true

			// 룰을 체크할 단위는 클래스 단위
			element = 'CLASS'

			// 브랜치 커버리지를 최소한 60% 만족시켜야 한다.
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.60
			}

			// 라인 커버리지를 최소한 60% 만족시켜야 한다.
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.60
			}

			// 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한한다.
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 200
//              maximum = 8
			}

			// 커버리지 체크를 제외할 클래스들
			excludes = [
//                    '*.test.*',
//                    '*.Kotlin*'
			]
		}
	}
}

task testCoverage(type: Test) {
	// task 지정으로
	// ./gradlew --console verbose test jacocoTestReport jacocoTestCoverageVerification 와 같은 긴 명령을
	// ./gradlew --console testCoverage 로 한꺼번에 순서대로 진행 가
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}